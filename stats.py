#!/usr/bin/env python
import os
import configparser
import psycopg2
from tabulate import tabulate
from datetime import datetime

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CONFIG_PATH = "config/config.ini"
CONFIG_SECTION_DB = "RSS-News.postgres_local"

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
    config = configparser.ConfigParser()
    config.read(CONFIG_PATH)

    db_config = {
        'host': config[CONFIG_SECTION_DB]['host'],
        'port': config[CONFIG_SECTION_DB]['port'],
        'dbname': config[CONFIG_SECTION_DB]['dbname'],
        'user': config[CONFIG_SECTION_DB]['user'],
        'password': config[CONFIG_SECTION_DB]['password']
    }

    return db_config

def connect_to_db(db_config):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
    return psycopg2.connect(**db_config)

def execute_query(conn, query):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    with conn.cursor() as cursor:
        cursor.execute(query)
        columns = [desc[0] for desc in cursor.description]
        results = cursor.fetchall()
        return columns, results

def show_monthly_stats(conn):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º"""
    query = """
    SELECT
        s.domain,
        date_trunc('month', npc.publication_date)::date AS month,
        COUNT(*) AS content_count,
        ROUND(SUM(npc.content_length)::numeric / (1024 * 1024), 4) AS total_content_mb,
        ROUND(AVG(npc.content_length)::numeric, 2) AS avg_content_bytes
    FROM sitemaps s
    JOIN news_pages np ON s.id_sitemap = np.id_sitemap
    JOIN news_pages_content npc ON np.id_page = npc.id_page
    WHERE npc.content IS NOT NULL
      AND npc.publication_date >= date_trunc('month', current_date) - interval '5 months'
    GROUP BY s.domain, month
    ORDER BY s.domain, month DESC;
    """

    columns, results = execute_query(conn, query)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ –º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    numbered_results = []
    for i, row in enumerate(results, 1):
        numbered_results.append([i] + list(row))

    headers = ["‚Ññ", "–î–æ–º–µ–Ω", "–ú–µ—Å—è—Ü", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ\n–∫–æ–Ω—Ç–µ–Ω—Ç–∞", "–û–±—â–∏–π\n–æ–±—ä–µ–º\n(–ú–ë)", "–°—Ä–µ–¥–Ω–∏–π\n—Ä–∞–∑–º–µ—Ä\n(–±–∞–π—Ç)"]
    colalign = ["right", "left", "right", "right", "right", "right"]

    print("\nüìä –ü–û–ú–ï–°–Ø–ß–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–ù–¢–ï–ù–¢–ê –ü–û –î–û–ú–ï–ù–ê–ú")
    print(tabulate(numbered_results, headers=headers, tablefmt="pretty", colalign=colalign))

def show_domain_stats(conn):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ –¥–æ–º–µ–Ω–∞–º"""
    query = """
    SELECT
        s.domain,
        COUNT(np.id_page) AS total_pages,
        COUNT(npc.id_page) AS pages_in_news_pages_content,
        COUNT(CASE WHEN npc.content IS NOT NULL AND npc.content <> '' THEN 1 END) AS pages_with_non_empty_content,
        COUNT(DISTINCT ce.id_page) AS pages_with_embeddings,
        MIN(np.publication_date)::date AS min_publication_date,
        MAX(np.publication_date)::date AS max_publication_date
    FROM sitemaps s
    JOIN news_pages np ON s.id_sitemap = np.id_sitemap
    LEFT JOIN news_pages_content npc ON np.id_page = npc.id_page
    LEFT JOIN content_embeddings ce ON np.id_page = ce.id_page
    GROUP BY s.domain
    ORDER BY s.domain;
    """

    columns, results = execute_query(conn, query)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é –∏ –º–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫
    numbered_results = []
    for i, row in enumerate(results, 1):
        numbered_results.append([i] + list(row))

    headers = ["‚Ññ", "–î–æ–º–µ–Ω", "–í—Å–µ–≥–æ\n—Å—Ç—Ä–∞–Ω–∏—Ü", "–°—Ç—Ä–∞–Ω–∏—Ü\n—Å–ø–∞—Ä—Å–µ–Ω–æ",
               "–°—Ç—Ä–∞–Ω–∏—Ü\n—Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º", "–°—Ç—Ä–∞–Ω–∏—Ü\n—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏",
               "–ú–∏–Ω–∏–º.\n–¥–∞—Ç–∞", "–ú–∞–∫—Å–∏–º.\n–¥–∞—Ç–∞"]
    colalign = ["right", "left", "right", "right", "right", "right", "right", "right"]

    print("\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–¢–†–ê–ù–ò–¶ –ü–û –î–û–ú–ï–ù–ê–ú")
    print(tabulate(numbered_results, headers=headers, tablefmt="pretty", colalign=colalign))

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        db_config = load_config()

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        with connect_to_db(db_config) as conn:
            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            show_monthly_stats(conn)
            show_domain_stats(conn)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}")

if __name__ == "__main__":
    main()